
import React, { useMemo, useState } from 'react';import { LootProvider, useLoot } from './features/loot/store';import { AuthProvider, useAuth, Profile } from './features/auth/store';import { supabase } from '@/lib/supabase';import { computeSplit } from './features/loot/logic';type View = { name: 'items' } | { name: 'item', id: string } | { name: 'summary' } | { name: 'admin' };export const App: React.FC = () => {  return (    <AuthProvider>      <LootProvider>        <Shell />      </LootProvider>    </AuthProvider>  );};const AssignmentForm: React.FC<{ remaining: number; suggestNames: string[]; onAssign: (p: { name: string; qty: number }) => void }>  = ({ remaining, suggestNames, onAssign }) => {  const [name, setName] = useState('');  const [qty, setQty] = useState(1);  const [open, setOpen] = useState(false);  const filtered = useMemo(() => name.trim() ? suggestNames.filter(n => n.toLowerCase().includes(name.toLowerCase())) : suggestNames, [name, suggestNames]);  const submit = (e: React.FormEvent) => {    e.preventDefault();    if (!name.trim() || qty <= 0) return;    onAssign({ name: name.trim(), qty: Math.min(qty, Math.max(0, remaining)) || 0 });    setName('');    setQty(1);  };  return (    <form onSubmit={submit} className="mt-3 flex flex-wrap items-center gap-2">      <div className="relative min-w-[200px] flex-1">        <input          className="w-full rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800"          placeholder="Member name"          value={name}          onChange={(e) => { setName(e.target.value); setOpen(true); }}          onFocus={() => setOpen(true)}          onBlur={() => setTimeout(() => setOpen(false), 150)}          autoComplete="off"        />        {open && filtered.length > 0 && (          <div className="absolute z-20 mt-1 max-h-56 w-full overflow-auto rounded-md border border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800">            {filtered.map((n) => (              <button key={n} type="button" className="block w-full px-3 py-2 text-left text-sm hover:bg-gray-50 dark:hover:bg-gray-700" onMouseDown={(e) => { e.preventDefault(); setName(n); setOpen(false); }}>                {n}              </button>            ))}          </div>        )}      </div>      <input className="w-28 rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800" type="number" min={1} max={remaining} value={qty} onChange={(e) => setQty(parseInt(e.target.value || '0', 10))} />      <button disabled={remaining <= 0} className="inline-flex items-center gap-1 rounded-md border border-transparent bg-brand-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-brand-500 disabled:opacity-60" type="submit">Assign</button>    </form>  );};const Shell: React.FC = () => {  const [view, setView] = useState<View>({ name: 'items' });  const { items, requests } = useLoot();  useMemo(() => computeSplit(items, requests), [items, requests]);  return (    <div className="w-full min-h-screen bg-gray-50 p-3 text-gray-900 dark:bg-gray-900 dark:text-gray-100 sm:p-4 lg:p-6">      <TopBar setView={setView} />      {view.name === 'items' && <ItemsView openItem={(id) => setView({ name: 'item', id })} />}      {view.name === 'item' && <ItemDetailView id={view.id} goBack={() => setView({ name: 'items' })} />}      {view.name === 'summary' && <SummaryView />}      {view.name === 'admin' && <AdminView />}      <footer className="mt-6 text-xs opacity-70">Data is stored in Supabase for your project.</footer>    </div>  );};const TopBar: React.FC<{ setView: (v: View) => void }> = ({ setView }) => {  const { session, profile, isLeader, signOut } = useAuth();  return (    <header className="mb-4 flex flex-wrap items-center gap-3">      <h1 className="m-0 text-2xl font-semibold">DropSplit — Lineage 2 Loot</h1>      <nav className="ml-auto flex w-full flex-wrap gap-2 sm:w-auto">        <button className="inline-flex w-full items-center gap-1 rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm font-medium shadow-sm hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700 sm:w-auto" onClick={() => setView({ name: 'items' })}>Items</button>        {isLeader && (          <>            <button className="inline-flex w-full items-center gap-1 rounded-md border border-transparent bg-brand-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-brand-500 sm:w-auto" onClick={() => setView({ name: 'summary' })}>Split Summary</button>            <button className="inline-flex w-full items-center gap-1 rounded-md border border-transparent bg-brand-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-brand-500 sm:w-auto" onClick={() => setView({ name: 'admin' })}>Admin</button>          </>        )}        {!session ? <AuthInline /> : (          <div className="ml-auto flex items-center gap-2">            <span className="text-sm opacity-80">{profile?.username}{profile?.approved ? '' : ' (pending)'}{isLeader ? ' • leader' : ''}</span>            <button className="inline-flex items-center gap-1 rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm font-medium shadow-sm hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700" onClick={() => signOut()}>Sign out</button>          </div>        )}      </nav>    </header>  );};const AuthInline: React.FC = () => {  const { signIn, signUp } = useAuth();  const [username, setUsername] = useState('');  const [password, setPassword] = useState('');  const [mode, setMode] = useState<'signin' | 'signup'>('signin');  const [busy, setBusy] = useState(false);  const submit = async (e: React.FormEvent) => {    e.preventDefault();    setBusy(true);    try {      if (mode === 'signin') await signIn(username, password);      else await signUp(username, password);    } catch (err: any) {      alert(err.message || 'Auth error');    } finally {      setBusy(false);    }  };  return (    <form onSubmit={submit} className="flex w-full flex-wrap items-center gap-2 sm:w-auto">      <input className="min-w-[160px] flex-1 rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800" placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} />      <input className="min-w-[160px] flex-1 rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800" type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />      <button disabled={busy} className="inline-flex items-center gap-1 rounded-md border border-transparent bg-brand-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-brand-500" type="submit">{mode === 'signin' ? 'Sign in' : 'Sign up'}</button>      <button type="button" className="text-sm underline opacity-80" onClick={() => setMode(mode === 'signin' ? 'signup' : 'signin')}>        {mode === 'signin' ? 'Create account' : 'Have an account? Sign in'}      </button>    </form>  );};const ItemsView: React.FC<{ openItem: (id: string) => void }> = ({ openItem }) => {  const { items, addItem, removeItem, requests, addRequest } = useLoot();  const { isLeader, session } = useAuth();  const [name, setName] = useState('');  const [qty, setQty] = useState(1);  const [date, setDate] = useState(() => new Date().toISOString().slice(0, 10));  const [rqQty, setRqQty] = useState<Record<string, number>>({});  const getRqQty = (id: string) => (rqQty[id] ?? 1);  const setRqQtyFor = (id: string, val: number) => setRqQty((prev) => ({ ...prev, [id]: Math.max(1, val) }));  const onAdd = (e: React.FormEvent) => {    e.preventDefault();    if (!name.trim() || qty <= 0) return;    addItem({ name: name.trim(), quantity: qty, dateISO: date });    setName('');    setQty(1);  };  const requestCount = (itemId: string) => requests.filter(r => r.itemId === itemId).reduce((sum, r) => sum + (r.quantity || 0), 0);  const allNames = useMemo(() => Array.from(new Set(items.map(i => i.name))).sort((a,b) => a.localeCompare(b)), [items]);  const filtered = useMemo(() => name.trim() ? allNames.filter(n => n.toLowerCase().includes(name.toLowerCase())) : [], [name, allNames]);  const [openSuggest, setOpenSuggest] = useState(false);  return (    <div>      <h2 className="mb-2 text-lg font-semibold">Items</h2>      {isLeader && (      <form onSubmit={onAdd} className="mb-4 flex flex-wrap gap-2">        <div className="relative min-w-[200px] flex-1">          <input            className="w-full rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800"            placeholder="Item name"            value={name}            onChange={(e) => { setName(e.target.value); setOpenSuggest(true); }}            onFocus={() => setOpenSuggest(true)}            onBlur={() => setTimeout(() => setOpenSuggest(false), 150)}            required            autoComplete="off"          />          {openSuggest && filtered.length > 0 && (            <div className="absolute z-20 mt-1 max-h-56 w-full overflow-auto rounded-md border border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800">              {filtered.map((n) => (                <button                  key={n}                  type="button"                  className="block w-full px-3 py-2 text-left text-sm hover:bg-gray-50 dark:hover:bg-gray-700"                  onMouseDown={(e) => { e.preventDefault(); setName(n); setOpenSuggest(false); }}                >                  {n}                </button>              ))}            </div>          )}        </div>        <input className="w-full rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800 sm:w-28" type="number" min={1} value={qty} onChange={(e) => setQty(parseInt(e.target.value || '0', 10))} />        <input className="w-full rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800 sm:w-auto" type="date" value={date} onChange={(e) => setDate(e.target.value)} />        <button className="inline-flex w-full items-center gap-1 rounded-md border border-transparent bg-brand-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-brand-500 sm:w-auto" type="submit">Add</button>      </form>      )}      {items.length === 0 ? (        <p className="text-sm opacity-80">No items yet. Add a drop above.</p>      ) : (        <div className="overflow-x-auto rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800">          <table className="min-w-[820px] divide-y divide-gray-200 dark:divide-gray-800">            <thead>              <tr>                <th className="py-2 text-left text-sm font-semibold text-gray-700 dark:text-gray-200">Name</th>                <th className="py-2 text-left text-sm font-semibold text-gray-700 dark:text-gray-200">Qty</th>                <th className="py-2 text-left text-sm font-semibold text-gray-700 dark:text-gray-200">Date</th>                <th className="py-2 text-left text-sm font-semibold text-gray-700 dark:text-gray-200">Requested Qty</th>                <th className="py-2 text-left text-sm font-semibold text-gray-700 dark:text-gray-200">Quick Request</th>                <th className="py-2 text-left text-sm font-semibold text-gray-700 dark:text-gray-200"></th>              </tr>            </thead>            <tbody className="divide-y divide-gray-100 dark:divide-gray-800">              {items.map((it) => (                <tr key={it.id}>                  <td className="py-2 text-sm text-gray-800 dark:text-gray-100">                    <button className="text-brand-600 hover:underline" onClick={() => openItem(it.id)}>{it.name}</button>                  </td>                  <td className="py-2 text-sm text-gray-800 dark:text-gray-100">{it.quantity}</td>                  <td className="py-2 text-sm text-gray-800 dark:text-gray-100">{it.dateISO}</td>                  <td className="py-2 text-sm text-gray-800 dark:text-gray-100">{requestCount(it.id)}</td>                  <td className="py-2 text-sm text-gray-800 dark:text-gray-100">                    <div className="flex items-center gap-2">                      <input                        className="w-20 rounded-md border border-gray-300 bg-white px-2 py-1 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800"                        type="number"                        min={1}                        value={getRqQty(it.id)}                        onChange={(e) => setRqQtyFor(it.id, parseInt(e.target.value || '1', 10))}                      />                      <button                        disabled={!session}                        className="inline-flex items-center gap-1 rounded-md border border-transparent bg-brand-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-brand-500 disabled:opacity-60"                        onClick={() => {                          const q = getRqQty(it.id);                          if (q > 0) {                            addRequest({ itemId: it.id, quantity: q });                            setRqQtyFor(it.id, 1);                          }                        }}                      >                        Request                      </button>                    </div>                  </td>                  <td className="py-2 text-right text-sm text-gray-800 dark:text-gray-100">                    {isLeader && (                      <button className="inline-flex items-center gap-1 rounded-md border border-transparent bg-red-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-red-500" onClick={() => removeItem(it.id)}>Delete</button>                    )}                  </td>                </tr>              ))}            </tbody>          </table>        </div>      )}    </div>  );};const ItemDetailView: React.FC<{ id: string; goBack: () => void }> = ({ id, goBack }) => {  const { items, requests, assignments, addAssignment, removeRequest, removeAssignment, updateItem } = useLoot();  const { isLeader, session } = useAuth();  const item = items.find((x) => x.id === id);  if (!item) return <div className="text-sm opacity-80">Item not found.</div>;  const myRequests = requests.filter((r) => r.itemId === id);  const myAssignments = assignments.filter((a) => a.itemId === id);  const assignedQty = myAssignments.reduce((s, a) => s + a.quantity, 0);  const remainingQty = Math.max(0, item.quantity - assignedQty);  const allocations = computeSplit([item], myRequests)[item.id];  // request entry moved to Items list  const setItemQty = (newQty: number) => updateItem(item.id, { quantity: Math.max(0, newQty) });  return (    <div>      <button className="inline-flex w-full items-center gap-1 rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm font-medium shadow-sm hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700 sm:w-auto" onClick={goBack}>← Back</button>      <h2 className="mt-2 text-xl font-semibold">{item.name}</h2>      <div className="mb-2 mt-1 flex items-center gap-3">        <label className="text-sm">          Quantity:          <input className="ml-2 w-full rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800 sm:w-28" type="number" min={0} value={item.quantity} onChange={(e) => setItemQty(parseInt(e.target.value || '0', 10))} />        </label>        <span className="text-sm opacity-80">Date: {item.dateISO}</span>      </div>      <h3 className="mt-4 text-lg font-semibold">Requests</h3>      <p className="mb-2 text-sm opacity-80">Use the Items list to add a quick request.</p>      {myRequests.length === 0 ? <p className="text-sm opacity-80">No requests yet.</p> : (        <ul className="space-y-1">          {myRequests.map((r) => (            <li key={r.id} className="flex items-center justify-between rounded-lg border border-gray-200 bg-white p-3 shadow-sm dark:border-gray-700 dark:bg-gray-800">              <span>{r.memberName} � {r.quantity}<span className=" ml-2 text-xs opacity-70\>{new Date(r.createdAt).toLocaleDateString()}</span></span>              {(isLeader || (session?.user?.id && r.requesterId === session.user.id)) ? (                <button className="inline-flex items-center gap-1 rounded-md border border-transparent bg-red-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-red-500" onClick={() => removeRequest(r.id)}>Remove</button>              ) : null}            </li>          ))}        </ul>      )}      <h3 className="mt-5 text-lg font-semibold">Suggested Split</h3>      {isLeader && allocations ? (        <div className="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800">          <ul className="list-disc space-y-1 pl-6">            {allocations.assignments.map((a) => (              <li key={a.memberName}><span className="font-medium">{a.memberName}</span>: {a.qty}</li>            ))}          </ul>          <p className="mt-2 text-sm opacity-80">Leftover: {allocations.leftover}</p>        </div>      ) : isLeader ? <p className="text-sm opacity-80">No split suggestion.</p> : null}      <h3 className="mt-5 text-lg font-semibold">Assignments</h3>      <p className="text-sm opacity-80">Assigned: {assignedQty} / {item.quantity} • Remaining: {remainingQty}</p>      {myAssignments.length === 0 ? (        <p className="text-sm opacity-80">No assignments yet.</p>      ) : (        <ul className="mt-2 space-y-1">          {myAssignments.map((a) => (            <li key={a.id} className="flex items-center justify-between rounded-lg border border-gray-200 bg-white p-3 shadow-sm dark:border-gray-700 dark:bg-gray-800">              <span>                {a.assigneeName} × {a.quantity}                <span className="ml-2 text-xs opacity-70">{new Date(a.createdAt).toLocaleDateString()}</span>              </span>              {isLeader && (                <button className="inline-flex items-center gap-1 rounded-md border border-transparent bg-red-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-red-500" onClick={() => removeAssignment(a.id)}>Remove</button>              )}            </li>          ))}        </ul>      )}      {isLeader && (        <AssignmentForm          remaining={remainingQty}          onAssign={(payload) => addAssignment({ itemId: id, assigneeName: payload.name, quantity: payload.qty })}          suggestNames={[...new Set(myRequests.map((r) => r.memberName).concat(myAssignments.map((a) => a.assigneeName)))]}        />      )}    </div>  );};const SummaryView: React.FC = () => {  const { assignments } = useLoot();  const summary: Record<string, number> = {};  for (const a of assignments) summary[a.assigneeName] = (summary[a.assigneeName] || 0) + a.quantity;  const names = Object.keys(summary).sort();  return (    <div>      <h2 className="mb-2 text-lg font-semibold">Assignments Summary</h2>      {names.length === 0 ? <p className="text-sm opacity-80">No assignments yet.</p> : (        <div className="overflow-x-auto rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800">          <table className="min-w-[520px] divide-y divide-gray-200 dark:divide-gray-800">            <thead>              <tr>                <th className="py-2 text-left text-sm font-semibold text-gray-700 dark:text-gray-200">Member</th>                <th className="py-2 text-left text-sm font-semibold text-gray-700 dark:text-gray-200">Total Assigned</th>              </tr>            </thead>            <tbody className="divide-y divide-gray-100 dark:divide-gray-800">              {names.map((n) => (                <tr key={n}>                  <td className="py-2 text-sm text-gray-800 dark:text-gray-100">{n}</td>                  <td className="py-2 text-sm text-gray-800 dark:text-gray-100">{summary[n]}</td>                </tr>              ))}            </tbody>          </table>        </div>      )}      <p className="mt-2 text-xs opacity-70">Leaders assign items; everyone can view totals here.</p>    </div>  );};// Tailwind utility classes are used directly.const AdminView: React.FC = () => {  const { isLeader, session } = useAuth();  const [profiles, setProfiles] = useState<Profile[] | null>(null);  const [loading, setLoading] = useState(false);  const [savingId, setSavingId] = useState<string | null>(null);  const load = async () => {    setLoading(true);    const { data, error } = await supabase      .from('profiles')      .select('id, username, role, approved, created_at')      .order('created_at', { ascending: true });    if (!error) setProfiles(data as unknown as Profile[]);    else alert(`Failed to load profiles: ${error.message}`);    setLoading(false);  };  useMemo(() => { if (isLeader) load(); }, [isLeader]);  if (!isLeader) return <p className="text-sm opacity-80">Admins only.</p>;  return (    <div>      <div className="mb-2 flex items-center justify-between">        <h2 className="text-lg font-semibold">Admin — Users</h2>        <button className="inline-flex items-center gap-1 rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm font-medium shadow-sm hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700" onClick={load} disabled={loading}>{loading ? 'Refreshing…' : 'Refresh'}</button>      </div>      {!profiles ? (        <p className="text-sm opacity-80">Loading users…</p>      ) : profiles.length === 0 ? (        <p className="text-sm opacity-80">No users yet.</p>      ) : (        <div className="overflow-x-auto rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800">          <table className="min-w-[640px] divide-y divide-gray-200 dark:divide-gray-800">            <thead>              <tr>                <th className="py-2 text-left text-sm font-semibold">Username</th>                <th className="py-2 text-left text-sm font-semibold">Role</th>                <th className="py-2 text-left text-sm font-semibold">Approved</th>                <th className="py-2 text-left text-sm font-semibold"></th>              </tr>            </thead>            <tbody className="divide-y divide-gray-100 dark:divide-gray-800">              {profiles.map((p) => (                <AdminRow                  key={p.id}                  p={p}                  leadersCount={profiles.filter((x) => x.role === 'leader' && x.approved).length}                  currentUserId={session?.user.id || ''}                  onSaved={(np) => setProfiles((prev) => prev ? prev.map(x => x.id === np.id ? np : x) : prev)}                  savingId={savingId}                  setSavingId={setSavingId}                />              ))}            </tbody>          </table>        </div>      )}    </div>  );};const AdminRow: React.FC<{ p: Profile; leadersCount: number; currentUserId: string; onSaved: (p: Profile) => void; savingId: string | null; setSavingId: (id: string | null) => void }> = ({ p, leadersCount, currentUserId, onSaved, savingId, setSavingId }) => {  const [role, setRole] = useState<Profile['role']>(p.role);  const [approved, setApproved] = useState<boolean>(p.approved);  const saving = savingId === p.id;  const save = async () => {    // Safety: prevent removing last approved leader    const wasLeader = p.role === 'leader' && p.approved === true;    const willBeLeader = role === 'leader' && approved === true;    const removingLeader = wasLeader && !willBeLeader;    if (removingLeader && leadersCount <= 1) {      alert('Cannot remove the last approved leader. Assign another leader first.');      return;    }    // Safety: prevent demoting or unapproving yourself    if (p.id === currentUserId && removingLeader) {      alert('You cannot demote or unapprove your own leader account.');      return;    }    setSavingId(p.id);    const { data, error } = await supabase      .from('profiles')      .update({ role, approved })      .eq('id', p.id)      .select('id, username, role, approved')      .single();    setSavingId(null);    if (error) {      alert(`Failed to save: ${error.message}`);      return;    }    onSaved(data as unknown as Profile);  };  return (    <tr>      <td className="py-2 text-sm">{p.username}</td>      <td className="py-2 text-sm">        <select value={role} onChange={(e) => setRole(e.target.value as Profile['role'])} className="rounded-md border border-gray-300 bg-white px-2 py-1 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-brand-500 dark:border-gray-700 dark:bg-gray-800">          <option value="member">member</option>          <option value="leader">leader</option>        </select>      </td>      <td className="py-2 text-sm">        <label className="inline-flex items-center gap-2">          <input type="checkbox" checked={approved} onChange={(e) => setApproved(e.target.checked)} />          <span>Approved</span>        </label>      </td>      <td className="py-2 text-right text-sm">        <button disabled={saving} onClick={save} className="inline-flex items-center gap-1 rounded-md border border-transparent bg-brand-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-brand-500 disabled:opacity-60">          {saving ? 'Saving…' : 'Save'}        </button>      </td>    </tr>  );};
